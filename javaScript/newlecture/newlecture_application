24. 첫 예제 간단한 계산기 프로그램 만들기

25. 노드 선택 방법 계산하기

[ 하위 엘리먼트 선택하기 ]
- .getElementsByTagName();
- .getElementsByClassName();

<section id="sec1">
    <h1></h1>
    <ul>
        <li>번호1</li>
        <li>번호2</li>
        <li>번호3</li>
    </ul>
</section>

var lis = sec1.getElementsByTagName("li");
lis[0].textContent = "Hello"; // .textContent (웹표준) == .innerText

26. Selectors API 

[Element 인터페이스의 노드 선택 방법]

css selector 사용 (querySelector/ querySelectorAll)

예) var txtX = section3.querySelector(".txt-x");
    var txtX = section3.querySelector("input[name='x']");  
    var section4 = document.querySelector("#section4");

27. Node와 Element Node 그리고 childNodes, children

문서를 구성하는 노드들의 계보를 표현하는 방법 : 부모/자식

childNodes : *주의! comment(주석), text(white space등)... 도 자식 !!
children : 태그 형태만 자식으로 취급한다.

28. Node의 종류와 개체 형식

[ 문서를 구성하는 Node의 종류(Type)들 ]

Document
    - DocumentType          : <!DOCTYPE ... >
    - Element               : <textarea><p><font>...
        - Attr              : <textarea rows="30", cols="40">
        - Entity            : &lt;뉴렉처&gt; &nbsp; // lt, gt, nbsp
        - EntityReference   : &lt;뉴렉처&gt; &nbsp; // &;
        - Text              : <p>뉴렉처</p>
    - Comment               : <!--주석-->
    - CDATASection          : <![CDATA[<,>,]]>
    - Notation              : <font color="#ffff00" size="10px"> // #ffff00, 10px

29. Node 인터페이스

www.w3.org/TR (기술문서)
https://www.w3.org/TR/2018/WD-dom41-20180201/#introduction-to-the-dom

30. 엘리먼트 노드의 속성 다루기 (속성 변경 예제)

[ 엘리먼트 객체의 속성을 사용하기 ]

- HTML 태그의 속성과 객체의 속성은 거의 일치
<input type="text" id="txt1" value="" />
<img src="pic1.jpg" id="img1" />

var img1 = document.getElementById("img1");
img1.??? // img 속성과 거의 일치함

31. CSS 스타일 속성 변경

[ style 속성을 이용해서 스타일 변경하기 ]

img1.src = txt1.value; // img 엘리먼트가 가지고 있는 속성
txt.style.border = "10px solid red"; // style이 가지고 있는 속성

- style 속성은 항상 문자열!! (수치도 꼭 써워야 함)
  txt1.style.width= 100; // xxx
  txt1.style.width= "100"; // xxx
  txt1.style.width= "100px"; // ok

32. 텍스트 노드를 동적으로 추가 / 삭제

[ 자바 스크립트를 위한 입/ 출력 객체 ]

- 현재 문서에 문자열 추가하기: 현재 document 트리에 노드 추가
- document 객체의 기능: 문서의 자식 노드 객체 생성
    ex) Element: createElement(in DOMStirng tag Name)
    Text: createTextNode(in DOMString data)..
- 노드 조작하기: appendChild, removeChild.. 
- 텍스트 노드 추가하기 
    1. 텍스트 노드 생성
      var txt = document.createTextNode("안녕하세요.");
    2. 텍스트 노드를 추가할 엘리먼트 노드 선택
      var div1 = document.getElementById("div1");
    3. 엘리먼트 노드에 텍스트 노드 추가하기
      div.appendChild(txt);

33. 엘리먼트 노드: 추가(appendChild, append, innerHTML)/ 삭제(removeChild,remove) 그리고 주의할 점들

34. 노드 복제 및 템플릿 복제

[ 노드복제 ]
-  var cloneNode = trNode.cloneNode(true); // true: deep 복제

[ 템플릿 복제 ]
- var cloneNode = document.importNode(template.content, true);

35. 노드 삽입(insertBefore insertAdjacentElement), 노드 순회(firstChild, previousSibli)

[ 노드 객체 선택하기 ]
- parent(Element)Node;
- first(Element)Child;
- last(Element)Child;
- previous(Element)Sibling;
- next(Element)Sibling;

- targetElement.insertAdjacentElement(position, element);
  position : beforebegin, afterbegin, beforeend, afterend

36. 다중 엘리먼트 선택방법과 일괄 삭제

37. 두 엘리먼트의 자리 바꾸기
- replaceChild / replaceWith(나 쟤랑 바꿔줘)
  
38. 제목으로 내용 정렬하기

39. 이벤트와 이벤트 객체

  [ 이벤트 객체 ]

  - 이벤트에서 발생한 부가 정보를 제공
  - 클릭했어요 > 어느위치를? 누가 클릭한거야?
  - 키가 눌렸어요 > 어디에서? 어떤키가? 어떤 키와 함께?

  [ 이벤트 종류에 따른 이벤트 객체 ]

  - The Event interface:
    NONE constant
    CAPTURING_PHASE constant
    AT_TARGET constant
    BUBBLING_PHASE constant
    type attribute
    target attribute
    currentTarget attribute
    eventPhase attribute
    bubbles attribute
    cancelabe attribute
    timeStamp attribute
    defaultPrevented attribute
    isTrusted attribute
    stopPropagation() 메소드
    stopImmediatePropagation() 메소드
    preventDefault() 메소드
    initEvent() 메소드

  - The EventTarget interface:
    addEventListener() 메소드
    removeEventListener() 메소드
    dispatchEvent() 메소드

  - The CustomEvent interface:
    initCustomEvent() 메소드
    detail attribute

40. 이벤트 객체의 target 속성 이용하기

[ 이벤트가 발생한 객체는 event.target ]
- 클릭한 이미지의 위치 정보 출력하기

41. 이벤트 버블링을 이용해 사용자 이벤트 처리

42. 이벤트 버블링 멈추기
  e.stopPropagation();

43. 여러 버튼을 가진 화면에서 이벤트를 처리하는 방법

44. 엘리먼트 노드의 기본행위 막기
  e.preventDefault();

45. DOM 이벤트 객체 인터페이스

  [ 이벤트 객체 ]

  - 이벤트에서 발생한 부가정보를 제공
  
    클릭했어요!! 어느 위치를?? 누굴 클릭한거야??
    키가 눌렸어요!! 어디에서?? 어던 키가?? 어떤 키와 함께??

    [window.]event 객체

46. DOM 이벤트 트리거 - .dispatchEvent(e)

불편한 문제 : 컨트롤 중에 스타일이 적용되지 않는 컴포넌트 

* 파일 선택 상자를 대신하는 <span />태그 사용
.gallery-file{
  display: none;
}
<div>
  <input type="file" id="gallery-file" class="gallery-file" /> // display: none
  <span id="file-button" class="file-button">파일선택</span>
</div>

** clcik 이벤트 트리거 구현코드 - 웹 표준 방식
var fileButton = document.getElementById("file-button");
fileButton.addEventListener("click", function(){
  var event = new MouseEvent("click", {
    'view':window,
    'bubbles':true,
    'cancelable':true
  });
  var file = document.getElementById("gallery-file");
  file.dispatchEvent(event);
});

47. DOM 이벤트 트리거 구현하기

48. 클릭 위치에 박스 옮기기 (마우스 이벤트 객체 사용하기 #1)
- 마우스가 클릭되는 위치로 박스 옮기기

49. 마우스 이벤트 좌표 3가지 구분하기

  1. 페이지 영역
  2. 클라이언트 영역 (화면에 보여지는 영역) < 페이지 영역
    - e.x, e.y
  3. 옵셋(offset) 영역 

50. 드래그 방식으로 박스 옮기기 (마우스 이벤트 객체 사용하기 #2)

51. 여러 개의 박스 드래그 하기
  - e.target.classList.contains("box")

52. 박스의 옵셋 좌표 이용하기

    **박스의 왼쪽 모서리 좌표값
    var left = container.offsetLeft;
    var top = container.offsetTop;

53. Mouse Event Capturing

  1. onmouseup > 컨테이너 밖에서 onmousedown > 다시 안으로 들어왔을경우 
     onmousedown을 인지 못해서 드래그 상태라고 생각하고 박스가 마우스를 따라 이동.
  2. 이벤트영역(.container) 밖에서 이벤트 발생시 container전달 안됨
  3. 이벤트영역을 .container에서 document로 확장하면 해결.
