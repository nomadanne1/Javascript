01. 학습 가이드

- 자바 스크립트와 입/출력 플랫폼
- HTML 요소들을 객체화 하는 로드 과정이 포함됨
- HTML파일 > Document Objects (객체트리 in Memory) > 사용자 인터페이스
- 자바스크립트 > Document Object > WindowObject

window 
window.location
window.history
window.Document

02. 자바스크립트의 탄생과 플랫폼

- 전송하는 데이터에 대한 유효성 검사의 필요성

ex. 로그인 > 폼 객체의 유효성 검사 > 제어할 수 있는 언어가 javaScript

클라이언트단에 입력값을 확인 할 수 있고 서버에서는 불필요한 처리를 할 필요가 없다.

03. 실습환경 준비하기 

- 편집 도구 다운로드 및 설치 : Visual Studio Code
- 브라우서 : 사파리. 크롬, 파이어폭스, 익스플로어 

04. 코드 작성과 Live Server 설치하기

- 스크립트 코드 작성 영역 > 어디에 넣어도 상관 없음 .
<html>
    <head>
    </head>
    <body>

        content

    </body>
</html>

05. 데이터 객체와 래퍼 클래스

- 일반적인 언어의 값의 종류와 변수: 정수. 실수. 문자, 문자열
- javaScript에서는 기본형식이 없고 Wrapper형 클래스만 있다.
   정수/ 실수: Number, 문자/ 문자열: String, 불리안: Boolean
   ex) var x = new Number(3); === var x = 3; // var z; z == undefined

06. 배열(Array) 생성과 사용하기

 [배열 객체]

  - push / pop 메소드를 이용한 데이터 관리 : Stack
    *pop을 통해 호출된 값은 사라진다 

    var nums = new Array();

    nums.push(5);   var n1 = nums.pop();
    alert(nums);    alert(nums);
    
    nums.push(10);  var n2 = nums.pop();
    alert(nums);    alert(nums);

    nums.push(21);  var n3 = nums.pop();
    alert(nums);    alert(nums);

  - 인덱스를 이용한 데이터 관리 : List

    var nums = new Array();

    nums[0] = 5;    alert(nums[0]);
    alert(nums);

    nums[1] = 10;   alert(nums[1]);
    alert(nums);

    nums[2] = 21;
    alert(nums);

 ex) var nums = new Array();

    nums[3] = 5;
    alert(nums);

    alert(nums.length); // 4 *0, 1, 2 비어있는 공간이 만들어진다

07. 배열 초기화와 조작하기

 [배열 객체 초기화]

 var nums = new Array();

 - 5개의 공간을 미리 준비함
 var nums = new Array(5);

 - 2개 이상의 값을 입력할 경우 > 초기값으로 인식 
 var nums = new Array(5, 10, 21); 

 - javascript는 배열 어떤 데이터도 받을 수 있음 
  (주의: 모든 것을 담을 수 있지만 그래서 오류를 범할 수도 있음)
 var nums - new Array(5, 10, 21, "Hello") 
 * alert(typeof nums[3]); 

 var nums = new Array(5, 10, 21, "hello", new Array(2, 3, 4));
 * 3을 꺼내고 싶으면 > alert(nums[4][1]);

 [배열 객체 조작]

 - splice() 메소드를 이용한 데이터 관리 : List
 * 삭제, 대체, 삽입

 var nums = new Array(5, 10, 21, "hello");
 nums.splice(1); // 1번째 위치부터 다 지워진다
 nums.splice(1,1); // 1번째 위치에서 하나만 지워진다.
 nums.splice(1,1,"hoho"); // 1번째 위치에서 하나만 지우고 그자리 "hoho"로 대체 > 대체
 nums.splice(1,0,"hoho"); // 1번째 위치에 "hoho"삽입 > 삽입

 08. Object 객체

 객체지향 프로그래밍 언어?
 - javascript : prototype, class 
 - 동적인 객체 정의> 자바스크립트는 맨땅에 객체를 만들고, 필요한 속성이 있으면 그안에 붙인다.

 [Object 객체의 Expand Object] : 확장이 가능한 object

 - 키를 기반으로 데이터를 저장해야 할때
 
 var exam = new Object();
 exam.kor = 30;
 exam.eng = 70;
 exam.math = 80;

 alert(exam.kor + exam.eng);

 - 키를 이용한 데이터 관리: Map

 var exam = new Object();

 exam["kor"] = 30;
 exam["eng"] = 70;
 exam["math"] = 80;

 alert(exam["kor"]);

 *변수에 담겨진 문자열을 이용해서 객체의 속성을 꺼내야할때 / 값을 대입해야 할때 사용. => ??

 09. JSON

 [ Javascirpt 데이터 객체와 JSON 생성 방법 ]

          JavaScript Object                 JavaScirpt Object Notation(JSON)

Boolean   var n = new Boolean(true);        var n = true;
Number    var n = new Number(3);            var n = 3;
String    var s = new String("hello");      var s = "hello";   var s = 'hello';
Array     var ar = new Array();             var ar = [];
Object    var ob = new Object();            var ob = {};

 [ JSON의 중첩 표현 ] 
 
 var notice = [
                {"id":1, "title":"hello json"},
                {"id":2, "title":"hi json"},
                {"id":3, "title":"json is"},
              ];

notice[1] //{{"id":2, "title":"hi json"}}

10. eval 함수와 JSON 파싱하기

*외부에서 넘겨받은 파일일경우 
'{ "id":1, "title":"hello" }' => 문자열로 넘겨진다 

객체화 할 수 있는 방법은? 
1. eval()
2. JSON.paser();

11. JSON 파서를 이용한 파싱

*JSON parser() <> JSON.stringfy();

12. 자바스크립트 연산자

===, !== 연산자

var x = 3;
var y = 3;

== 값을 비교하는 연산
document.write( x == y); // ture 

=== 주소를 비교하는 연산 
document.write( x === y); // true 
?! 똑같은 값을 가진 박스를 안만들고 주소만 참조해 준다.
다른박스 만들고 싶으면 var y = new Number(3);

3 + "4" // 34
3.5 + "4" // 3.54
3.5 - "2" // 1.5 ?? 
=> 덧셈을 할때는 다 문자열, 뺄셈을 할때는 문자열이 숫자가 된다.

console.log(5 < 3 + 4); // true
console.log("32" > "4"); // false
console.log(32 > "4"); // true

13. 자바스크립트 제어구조

- 조건문: if, while, do-while
- 반복문: while, for, for-in
- 선택문: else, else if, switch

* for-in문
i<ar.length; i++; 조건이랑 증감하는 부분이 생략됨.

14. 함수 객체와 표현식

함수?? 대입?? 객체??

int add(int x, int y){   
  return x+y; 
}

=> 자바스크립트의 함수
)var add = new Function("x, y", "return x+y;");   
alert(add(3, 4));

=> 자바스크립트의 함수 표현식1 (제일 많이사용)
var add = function(x,y){
  return x+y;
}; // ; 사용

=> 자바스크립트의 함수 표현식2
function add(x, y){
  return x+y;
} // ; 사용안함

15. 함수의 가변인자 arguments 콜렉션

가변적인 매개 변수

- 함수의 매개변수와 관련된 콜렉션

function add(x, y){
  console.log(arguments.length); 
  return x+y;
};

var sum = add(2, 3);

# 어떻게 될까 ?.?
var sum = add(2, 3, "hello", 3, 4, 5, 6, 7, 88) // 5

=> 자바스크립트는 내부적으로 arguments라는 가변적으로 수집할 수 있는 컬렉션을 가지고 있다.
  
  console.log(arguments.length) // 9
  console.log(arguments[3]) // 3 
  console.log(typeof arguments[0]) // number

** 자바스크립트의 함수

1. 함수는 인자에 대한 개수의 정의가 분명하지 않다.
2. 선언은 2개일지라도 사용할때는 여러개 일 수가 있다. 
3. 가변적으로 사용할 경우 arguments라는 컬렉션을 사용할 수 있다.

16. 변수의 가시영역과 global 객체 그리고 전역변수

- var 선언 변수는 정적인 방식으로 생성
  console.log(a); // undefined *변수선언은 되었으나(준비는 되었으나) 값을 할당하지 않았다. 
  var a = 1;

- global 변수는 동적인 방식으로 생성
  a = 1; // window라는 전역객체에 a가 붙음
  console.log(a); // 1

  console.log(a); // error
  a = 1;

  var f1 = function(){
    a = 1; // window.a = 1; (전역변수)
    
    var a = 3; // (지역변수)
    a++; // 어떤 a? 둘다 있을때는 지역변수가 우선!! 
    console.log(a);
  }

  f1();

- 동일한 변수를 여러 번 선언하는 경우는? 에러?? 안남 !!
  var a = 1;
  var a = 2;
  console.log(a);

- 중괄호를 사용하는 경우
  {
    var a = 1; // 자바스크립트에서는 중괄호가 변수 영역을 나누지 않음.
  }
  console.log(a);

- 함수 안에서 선언한 global 변수
  function f1(){
    var a = 1; // 자바스크립트에서는 함수영역만 변수 영역을 나눔.
  }

  f1();
  console.log(a); // error

  17. 클로저

  => 자바스크립트는 함수를 정의 하지 않고 함수를 객체로 만들어서 자체가 정의다!

  - 변수의 생명주기와 클로저 (Closure)

  ## var a 의 생명주기 -> 함수내에서 닫힘
  function f1(){
    var a = 1; // *지역변수
    
    return a;
  } 

  var a = f1();
  console.log(a);

  ## var a의 생명주기 => console.log(a)... 이후까지 계속 열려있음
  function f1(){
    var a = 1; // *지역변수
    
    return function f2(){ // var a를 유일하게 닫을 수 있는 키워드 => 클로저 !!!!
      return a;
    }
  }

  var f = f1(); // f1() 함수 객체를 반환 => var f 함수 이름 !! 
  var a = f();
  console.log(a);

** 
클로저를 통해서 자원이 묶이는 일이 발생할 수 있다.
알고 묶는 것과 모르고 묶는 것은 다른일 !!

클로저가 발생하지 않도록 프로그램을 잘 만들거나
필요할 경우는 일부로 클로저를 만들 수 있어야한다.

클로저란?
내가 남을 클로즈 할 수 있는 키를 가지고 있다 ! 라고 생각하면 된다.
( 함수내에서 자기것 위에 있는 자원을 쓰면서 물고있는 경우가 있다.. )

18. window 플랫폼을 이용한 대화 parseInt, alert, prompt, confirm

>> HTML5에서 확장된 플랫폼의 기능

[ UI (동적문서) ]
1. Document Object
2. Cascading Style Sheets

[ HTML5 API 멀티미디어 네트워크통신 로컬저장소 ]
3. Graphics and Media
4. Web Appliation Appliation
5. Internet Platform Appliation

>> 브라우저 객체

window
window.location
window.history
window.document : body> img / form> input...

1. 최상위 객체인 window 객체

window 객체의 Members : 사용자와 상호작용을 위한 기본 도구

[ Methods ]

 alert()
  - window.alert(x + y).., > window는 생략 가능
 
 confirm()

 prompt()
  - 입력값은 string으로 전달되는 것 주의 !! 
  -  parseInt() 사용해서 숫자로 변경
  -  cf. parseInt("abc"); // return NaN (Not a Number);
         parseInt("12abc"); // return 12 (뒤에 문자 자동 탈락 시켜주는 기능도 있다는것 알아 두기 !!)

19. 이벤트 기반의 프로그래밍

1. 스크립트 코드 작성 영역 
  <script>
    // 페이지가 읽혀질 때 실행
  </script>

2. 또 다른 스크립트 코드 영역
  <input onXXX=" "/> // 이벤트가 발생할 때 실행

  <input onclick=" "/>
  <input onmuseover=" "/>

[ 이벤트와 함수 호출 ]

- 덧셈 결과 출력하기

<input type="button" value="출력" onclick="var x, y; x=prompt('x 값을 입력하세요')..." /> 
// 가능은 하나 가독성이 떨어진다

<script>
  function printResult()
  {
    var x, y;
    x = prompt("x 값을 입력하세요", 0);
    y = prompt("y 값을 입력하세요", 0);
    alert(x + y);
  }
</script>
<input type="button" value="출력" onclick="printResult();" />

20. 문서의 엘리먼트 객체 이용하기

[ 자바스크립트를 위한 입/출력 객체 ]

- html요소들을 객체화 하는 로드 과정이 포함됨
 > html파일
 > (load) Document Object (객체 트리 in Memory) // element 노드, text 노드, 주석 노드...
 > (Show) 사용자 인터페이스

[ 스크립트 작성 방식 ]
- 문서 객체의 속성 사용하기 // id 부여
- 객체 생성과 사용 시점의 문제

21. 코드 초기화와 엘리먼트 객체 사용하기

- 객체 아이디 명명 방법의 문제
id = "btnPrint" 

명명 규칙 => btn-print 그러나 script에서 btn-print.onclick 호출시 오류!! 
var btnPrint = document.getElementById("btn-print"); 이렇게 꺼내서 사용하는 것이 정석이다.

*document.getElementById() // 많은 것을 담고 있는 보따리

